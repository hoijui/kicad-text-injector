#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2021 Robin Vobruba <hoijui.quaero@gmail.com>
#
# SPDX-License-Identifier: CC0-1.0

import os
import sys

import click
from git import Repo
from git.exc import InvalidGitRepositoryError

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])

@click.group(context_settings=CONTEXT_SETTINGS)
@click.version_option()
def git_version_token():
    pass

def git_version(ref='HEAD', repo_path='.', empty_on_error=False):
    try:
        repo = Repo(repo_path)
        #vers = repo.git.describe('--tags', '--dirty', '--broken', '--always')
        if ref == 'HEAD':
            last_arg = '--dirty'
        else:
            last_arg = ref
        vers = repo.git.describe('--long', '--candidates=99',
                '--always', '--first-parent', last_arg)
    except InvalidGitRepositoryError as err:
        if empty_on_error:
            vers = ""
        else:
            raise err
    return vers

def get_self_version():
    try:
        this_files_dir = os.path.dirname(os.path.realpath(__file__))
        return git_version(ref='HEAD', repo_path=this_files_dir)
    except Exception as err:
        print('Failed to get the git version for ourselfs', file=sys.stderr)
        raise err

@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument('ref', type=click.STRING, envvar='GIT_REF', default='HEAD')
#@click.argument('repo_path', type=click.Path(), envvar='GIT_REPO', default='.')
@click.option('--repo-path', '-C', type=click.Path(), envvar='GIT_REPO',
        default='.', help='The path to the local git repo')
@click.option('--empty-on-error', '-e', is_flag=True, default=None,
        help='Return an empty string, instead of an error, when the supplied dir is not a valid git repo')
@click.version_option(get_self_version())
def git_version_command(ref='HEAD', repo_path='.', empty_on_error=False):
    '''
    Compiles a git based version string for the project.
    It is based on 'git describe'.
    '''
    vers = git_version(ref, repo_path, empty_on_error)
    print(vers)

if __name__ == '__main__':
    git_version_command()

